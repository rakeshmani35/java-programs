package com.lock;

import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.locks.ReentrantReadWriteLock;

class ReadThreadClass implements Runnable {

	@Override
	public void run() {

	}

}

class WriteThreadClass implements Runnable {

	@Override
	public void run() {

	}

}

public class ReentrantRWDemo {

	private final Map<String, String> map = new TreeMap<String, String>();
	private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock();
	private final ReentrantReadWriteLock.ReadLock readLock = lock.readLock();
	private final ReentrantReadWriteLock.WriteLock writeLock = lock.writeLock();

	public String readResource(String key) {
		System.out.println("In get method waiting to acquire lock " + Thread.currentThread().getName());
		readLock.lock();
		System.out.println("In get method acquired read lock " + Thread.currentThread().getName());
		try {
			try {
				Thread.sleep(1500);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			return map.get(key);
		} finally {
			readLock.unlock();
			System.out.println("In get method released read lock " + Thread.currentThread().getName());
		}
	}

	public String wrireResource(String key, String value) {
		System.out.println("In put method waiting to acquire lock " + Thread.currentThread().getName());
		writeLock.lock();
		System.out.println("In put method acquired write lock " + Thread.currentThread().getName());
		try {
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			return map.put(key, value);
		} finally {
			writeLock.unlock();
			System.out.println("In put method released write lock " + Thread.currentThread().getName());
		}
	}

	public static void main(String[] args) {

		ReentrantRWDemo rwDemo = new ReentrantRWDemo();

		rwDemo.wrireResource("1", "One");
		rwDemo.wrireResource("2", "Two");
		rwDemo.wrireResource("3", "Three");
	}

}
