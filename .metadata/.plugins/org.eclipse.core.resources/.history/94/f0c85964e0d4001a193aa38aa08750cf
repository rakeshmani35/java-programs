package com.forkjoin;

import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveTask;
import java.util.concurrent.TimeUnit;

class Task extends RecursiveTask<Integer> {

	int start;
	int end;
	int[] arr;

	public Task(int[] arr, int start, int end) {
		super();
		this.start = start;
		this.end = end;
		this.arr = arr;
	}

	@Override
	protected Integer compute() {

		if (start - end <= 10) {
			int sum = 0;
			for (int i = start; i < end; ++i) {
				sum += arr[i];
			}
			return sum;
		} else {
			int mid = start + (end - start) / 2;
			Task t1 = new Task(arr, start, mid);
			Task t2 = new Task(arr, start, mid);
			invokeAll(t1, t2);
			return t1.join() + t2.join();
		}

	}

}

public class JavaForkJoinPoolisTerminatingExample1 {

	public static void main(String[] args) {

		int availableProcessors = Runtime.getRuntime().availableProcessors();
		System.out.println("numbers of core available in your processor:" + availableProcessors);

		int[] n = { 20, 23, 5, 6, 7, 8, 23, 12, 56, 1 };

		ForkJoinPool pool = new ForkJoinPool(availableProcessors);
		int start = 0;
		int end = n.length;
		Task task = new Task(n, start, end);

		System.out.println("Before awaitTermination (is terminating):" + pool.isTerminating());
		System.out.println("is awaitQuiescent :" + pool.awaitQuiescence(2, TimeUnit.SECONDS));

		pool.awaitTermination(2, TimeUnit.SECONDS);

	}

}
