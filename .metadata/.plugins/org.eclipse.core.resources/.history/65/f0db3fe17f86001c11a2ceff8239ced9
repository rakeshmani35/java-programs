package com.thread.communication;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

// https://javarevisited.blogspot.com/2015/06/java-lock-and-condition-example-producer-consumer.html#axzz7K1DKvLjM

class SharedResource {
	// producer consumer problem data
	private static final int CAPACITY = 5;
	private final Queue queue = new LinkedList<>();
	private final Random theRandom = new Random();

	// lock and condition variables
	private final Lock lock = new ReentrantLock();
	private final Condition notFull = lock.newCondition();
	private final Condition notEmpty = lock.newCondition();

	public void put() throws InterruptedException {

		lock.lock();
		try {
			while (queue.size() == CAPACITY) {
				System.out.println(Thread.currentThread().getName() + " queue is full, waiting");
				notEmpty.await();
			}

			int number = theRandom.nextInt();
			boolean isAdded = queue.offer(number);

			if (isAdded) {
				System.out.printf("%s added %d into queue %n", Thread.currentThread().getName(), number);

				// signal consumer thread that, buffer has element now
				notFull.signalAll();
			}

		} finally {
			lock.unlock();
		}
	}

	public void get() throws InterruptedException {

		lock.lock();

		try {
			while (queue.size() == 0) {
				System.out.println(Thread.currentThread().getName() + " queue is empty, waiting");
				notFull.await();
			}

			Integer value = (Integer) queue.poll();
			if (value != null) {
				System.out.printf("%s consumed %d from queue %n", Thread.currentThread().getName(), value);

				// signal producer thread that, buffer may be empty now
				notEmpty.signalAll();

			}

		} finally {
			lock.unlock();
		}

	}

}

class Producer extends Thread {

	SharedResource sharedResource;

	public Producer(SharedResource resource) {
		super("PRODUCER");
		this.sharedResource = resource;
	}

	@Override
	public void run() {
		try {
			sharedResource.put();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

}

class Consumer extends Thread {

	SharedResource sharedResource;

	public Consumer(SharedResource resource) {
		super("CONSUMER");
		this.sharedResource = resource;
	}

	@Override
	public void run() {
		try {
			sharedResource.get();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

}

public class ProducerConsumerSolutionUsingLock {

	public static void main(String[] args) {

		SharedResource resource = new SharedResource();

		Producer p = new Producer(resource);
		Consumer c = new Consumer(resource);

		p.start();
		c.start();
	}

}
