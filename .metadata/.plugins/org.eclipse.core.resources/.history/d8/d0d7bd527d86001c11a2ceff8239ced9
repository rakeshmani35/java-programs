package com.thread.communication;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

// https://javarevisited.blogspot.com/2015/06/java-lock-and-condition-example-producer-consumer.html#axzz7K1DKvLjM

class SharedResource {
	// producer consumer problem data
	private static final int CAPACITY = 10;
	private final Queue queue = new LinkedList<>();
	private final Random theRandom = new Random();

	// lock and condition variables
	private final Lock lock = new ReentrantLock();
	private final Condition notFull = lock.newCondition();
	private final Condition notEmpty = lock.newCondition();

	public void put() throws InterruptedException {

		lock.lock();
		try {
			while (queue.size() == CAPACITY) {
				System.out.println(Thread.currentThread().getName() + "queue is full, waiting");
				notEmpty.await();

				int number = theRandom.nextInt();
				boolean isAdded = queue.offer(number);

				if (isAdded) {
					System.out.printf("%s added %d into queue %n", Thread.currentThread().getName(), number);

					// signal consumer thread that, buffer has element now
					notFull.signalAll();
				}
			}

		} finally {
			lock.unlock();
		}
	}

	public void get() {

		lock.lock();
	}

}

public class ProducerConsumerSolutionUsingLock {

	public static void main(String[] args) {

	}

}
