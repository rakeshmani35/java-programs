package com.thread.communication;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

// https://javarevisited.blogspot.com/2015/06/java-lock-and-condition-example-producer-consumer.html#axzz7K1DKvLjM

class SharedResource {
	// producer consumer problem data
	private static final int CAPACITY = 10;
	private final Queue queue = new LinkedList<>();
	private final Random theRandom = new Random();

	// lock and condition variables
	private final Lock lock = new ReentrantLock();
	private final Condition notFull = lock.newCondition();
	private final Condition notEmpty = lock.newCondition();

	public void put() {

	}

	public void get() {

	}

}

public class ProducerConsumerSolutionUsingLock {

	public static void main(String[] args) {

	}

}
